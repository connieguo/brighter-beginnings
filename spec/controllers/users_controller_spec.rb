require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    return {:email => 'test', :identity => 1, :locationID => 1}
  end
    
  def valid_attributes_case
    return {:email => 'test_case', :identity => 2, :locationID => 1}
  end
  
  def valid_attributes_manager
    return {:email => 'test_mgr', :identity => 3, :locationID => 1}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  def valid_session
    {:test => true}
  end

  describe "GET index" do
    it "assigns all users as @users" do
      user = User.create! valid_attributes
      get :index, {}, valid_session
      assigns(:users).should eq([user])
    end
  end

  describe "GET show" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :show, {:id => user.to_param}, valid_session
      assigns(:user).should eq(user)
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
      get :new, {}, valid_session
      assigns(:user).should be_a_new(User)
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :edit, {:id => user.to_param}, valid_session
      assigns(:user).should eq(user)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}, valid_session
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}, valid_session
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
      end

      it "redirects to the created user" do
        post :create, {:user => valid_attributes}, valid_session
        response.should redirect_to(:action => "main")
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}, valid_session
        assigns(:user).should be_a_new(User)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user" do
        user = User.create! valid_attributes
        # Assuming there are no other users in the database, this
        # specifies that the User created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        User.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => user.to_param, :user => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        assigns(:user).should eq(user)
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        response.should redirect_to(user)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => {}}, valid_session
        assigns(:user).should eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, {:id => user.to_param}, valid_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      user = User.create! valid_attributes
      delete :destroy, {:id => user.to_param}, valid_session
      response.should redirect_to(users_url)
    end
  end

  describe "main" do
    before do
      @mock_user = mock('User')
      session[:user_email] = "email"
      @families = [mock('Family'), mock('Family')]
    end
    it "sets the session redirect path" do
      User.should_receive(:find_by_email).twice.with("email").and_return(@mock_user)
      @mock_user.should_receive(:locationID).and_return(1)
      User.should_receive(:findNearbyFamilies).with(1).and_return(@families)
      post :main
      session[:redirect_path].should == user_main_path
    end
    it "should return all families if there are no filters" do
      User.should_receive(:find_by_email).twice.with("email").and_return(@mock_user)
      @mock_user.should_receive(:locationID).and_return(1)
      User.should_receive(:findNearbyFamilies).with(1).and_return(@families)
      post :main
      assigns(:display_families).should == @families
      session[:redirect_path].should == user_main_path
    end
    it "should filter out the list" do
      family_a = Family.new(:family_code => "1233", :locationID => 1)
      family_b = Family.new(:family_code => "1234", :locationID => 2)
      family_c = Family.new(:family_code => "1235", :locationID => 3)
      members_a = [mock('FamilyMember')]
      members_b = [mock('FamilyMember')]
      members_c = [mock('FamilyMember')]
      @family_list = [family_a, family_b, family_c]
      @trimmed_list = [family_b, family_c]
      User.should_receive(:find_by_email).twice.with("email").and_return(@mock_user)
      @mock_user.should_receive(:locationID).and_return(1)
      User.should_receive(:findNearbyFamilies).with(1).and_return(@family_list)
      FamilyMember.should_receive(:find_all_by_family_code).twice.with(family_a.family_code).and_return(members_a)
      members_a.should_receive(:count).twice.and_return(3)
      FamilyMember.should_receive(:find_all_by_family_code).twice.with(family_b.family_code).and_return(members_b)
      members_b.should_receive(:count).twice.and_return(5)
      FamilyMember.should_receive(:find_all_by_family_code).twice.with(family_c.family_code).and_return(members_c)
      members_c.should_receive(:count).twice.and_return(4)
      post :main, :family_size => [4, 5]
      assigns(:display_families).should == @trimmed_list
      session[:redirect_path].should == user_main_path
    end
  end
  
  describe "manage" do
    before do
      @user = mock('User')
      @user_to_promote = mock('User')
      session[:user_email] = "user_email"
    end
    it "should return an error if there is no user to promote" do
      User.should_receive(:find_by_email).twice.with("user_email").and_return(@user)
      User.should_receive(:find_by_email).with("promote_email").and_return(nil)
      post :manage, :user_promotion => {:user_email => "promote_email"}
      flash[:error].should == "This user was not found.  Please double check to make sure this user exists."
      response.should redirect_to users_url
    end
    it "should not let you modify a user that is >= you" do
      User.should_receive(:find_by_email).twice.with("user_email").and_return(@user)
      User.should_receive(:find_by_email).with("promote_email").and_return(@user_to_promote)
      @user_to_promote.should_receive(:identity).and_return(3)
      @user.should_receive(:identity).and_return(3)
      post :manage, :user_promotion => {:user_email => "promote_email", :account_level => "Donor"}
      flash[:error].should == "You require additional permissions to change this user's account level."
      response.should redirect_to users_url
    end
    it "should change a user to a donor" do
      @promote_user = User.new(:email => "promote_email", :locationID => 0, :identity => 3)
      User.should_receive(:find_by_email).twice.with("user_email").and_return(@user)
      User.should_receive(:find_by_email).with("promote_email").and_return(@promote_user)
      @user.should_receive(:identity).and_return(4)
      post :manage, :user_promotion => {:user_email => "promote_email", :account_level => "Donor"}
      response.should redirect_to users_url
      @promote_user.identity.should == 1
      flash[:notice].should == "Successfully changed user."
    end
    it "should change a user to a case manager" do
      @promote_user = User.new(:email => "promote_email", :locationID => 0, :identity => 3)
      User.should_receive(:find_by_email).twice.with("user_email").and_return(@user)
      User.should_receive(:find_by_email).with("promote_email").and_return(@promote_user)
      @user.should_receive(:identity).and_return(4)
      post :manage, :user_promotion => {:user_email => "promote_email", :account_level => "Case Manager"}
      response.should redirect_to users_url
      @promote_user.identity.should == 2
      flash[:notice].should == "Successfully changed user."
    end
    it "should change a user to a manager" do
      @promote_user = User.new(:email => "promote_email", :locationID => 0, :identity => 3)
      User.should_receive(:find_by_email).twice.with("user_email").and_return(@user)
      User.should_receive(:find_by_email).with("promote_email").and_return(@promote_user)
      @user.should_receive(:identity).and_return(4)
      post :manage, :user_promotion => {:user_email => "promote_email", :account_level => "Manager"}
      response.should redirect_to users_url
      @promote_user.identity.should == 3
      flash[:notice].should == "Successfully changed user."
    end
  end
  
  describe "view_donations" do
    before do
      session[:user_email] = "user_email"
      @user = mock('User')
      @donations = [mock('Donation'), mock('Donation')]
    end
    it "should find all approved donations if user is admin" do
      User.should_receive(:find_by_email).twice.and_return(@user)
      @user.should_receive(:identity).and_return(2)
      Donation.should_receive(:find).and_return(@donations)
      post :view_donations
      assigns(:donations).should == @donations
    end
    it "should find all donations with same user id if user is donor" do
      User.should_receive(:find_by_email).twice.and_return(@user)
      @user.should_receive(:identity).and_return(1)
      @user.should_receive(:id).and_return(5)
      Donation.should_receive(:find_all_by_user_id).with(5).and_return(@donations)
      post :view_donations
      assigns(:donations).should == @donations
    end
  end
end
